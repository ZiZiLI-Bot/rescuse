basePath: /api/v1
definitions:
  model.Judge:
    properties:
      advice_anxiety:
        type: string
      advice_depess:
        type: string
      advice_stress:
        description: Lời khuyên tương ứng
        type: string
      id:
        type: integer
      score_anxiety_max:
        type: integer
      score_anxiety_min:
        type: integer
      score_depess_max:
        type: integer
      score_depess_min:
        type: integer
      score_stress_max:
        description: Phạm vi điểm số
        type: integer
      score_stress_min:
        type: integer
    type: object
  model.LoginResponse:
    properties:
      code:
        type: string
      message:
        type: string
      refreshToken:
        type: string
      role:
        type: string
      success:
        type: boolean
      token:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  model.Profile:
    properties:
      avatar:
        type: string
      birthday:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
      newUser:
        type: string
      phone:
        type: string
      userId:
        type: integer
    type: object
  model.Question:
    properties:
      id:
        type: integer
      question:
        type: string
      question_group:
        type: integer
    type: object
  model.Quizz:
    properties:
      id:
        type: integer
      profileId:
        type: integer
      question_group:
        type: integer
      score_anxiety:
        type: integer
      score_depess:
        type: integer
      score_stress:
        description: Điểm số của bài test
        type: integer
    type: object
  model.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  model.User:
    properties:
      deleted_at:
        type: string
      id:
        type: integer
      password:
        type: string
      profile:
        $ref: '#/definitions/model.Profile'
      role:
        type: string
      username:
        type: string
    type: object
  model.UserPayload:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: rescuse.up.railway.app
info:
  contact: {}
  description: API lists for E-Rescues
  title: Swagger UI for E-Rescues
  version: "1.0"
paths:
  /judge/{id}:
    get:
      consumes:
      - application/json
      description: 'input: judge''s id => output: struct judge'
      parameters:
      - description: judge's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get judge by id
      tags:
      - judge-manager-apis
  /judge/advice:
    get:
      consumes:
      - application/json
      description: |-
        input: ScoreStress, ScoreDepress, ScoreAnxiety => output: struct judge-advice
        WARNING: ALl the score must be greater than 1 and less than 10
      parameters:
      - description: score_Stress
        in: query
        name: score_stress
        required: true
        type: integer
      - description: score_depress
        in: query
        name: score_depress
        required: true
        type: integer
      - description: score_anxiety
        in: query
        name: score_anxiety
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get judge-advice by score
      tags:
      - judge-manager-apis
  /judge/all:
    get:
      consumes:
      - application/json
      description: 'output: struct judges'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get judges
      tags:
      - judge-manager-apis
  /judge/create:
    post:
      consumes:
      - application/json
      description: 'input: judge model.Judge => output: status'
      parameters:
      - description: fill judge
        in: body
        name: judge
        required: true
        schema:
          $ref: '#/definitions/model.Judge'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create judges
      tags:
      - judge-manager-apis
  /judge/delete/{id}:
    delete:
      consumes:
      - application/json
      description: 'input: judge''s id => output: status'
      parameters:
      - description: judge's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete judge by id
      tags:
      - judge-manager-apis
  /judge/update:
    put:
      consumes:
      - application/json
      description: 'input: judge model.judge => output: status'
      parameters:
      - description: change judge
        in: body
        name: judge
        required: true
        schema:
          $ref: '#/definitions/model.Judge'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update judges
      tags:
      - judge-manager-apis
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: 'input: profile''s id => output: struct profile'
      parameters:
      - description: profile's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get profile by id
      tags:
      - profile-manager-apis
  /profile/all:
    get:
      consumes:
      - application/json
      description: 'output: struct profiles'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get profiles
      tags:
      - profile-manager-apis
  /profile/create:
    post:
      consumes:
      - application/json
      description: 'input: profile model.profile => output: status'
      parameters:
      - description: fill profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/model.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create profiles
      tags:
      - profile-manager-apis
  /profile/delete/{id}:
    delete:
      consumes:
      - application/json
      description: 'input: profile''s id => output: status'
      parameters:
      - description: profile's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete profile by id
      tags:
      - profile-manager-apis
  /profile/update:
    put:
      consumes:
      - application/json
      description: 'input: profile model.profile => output: status'
      parameters:
      - description: change profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/model.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update profiles
      tags:
      - profile-manager-apis
  /profile/upsert:
    put:
      consumes:
      - application/json
      description: 'Upsert profile: if not exist => create'
      parameters:
      - description: info profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/model.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Upsert profiles
      tags:
      - profile-manager-apis
  /profile/user/{user_id}:
    get:
      consumes:
      - application/json
      description: 'input: user_id => output: struct profile'
      parameters:
      - description: true id
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get profile by userId
      tags:
      - profile-manager-apis
  /question/{id}:
    get:
      consumes:
      - application/json
      description: 'input: question''s id => output: struct question'
      parameters:
      - description: question's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get question by id
      tags:
      - question-manager-apis
  /question/all:
    get:
      consumes:
      - application/json
      description: 'output: struct questions'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get questions
      tags:
      - question-manager-apis
  /question/create:
    post:
      consumes:
      - application/json
      description: 'input: question model.Question => output: status'
      parameters:
      - description: fill question
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/model.Question'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create questions
      tags:
      - question-manager-apis
  /question/delete/{id}:
    delete:
      consumes:
      - application/json
      description: 'input: question''s id => output: status'
      parameters:
      - description: question's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete question by id
      tags:
      - question-manager-apis
  /question/filter/{group_id}:
    get:
      consumes:
      - application/json
      description: 'input: question''s group_id => output: group questions'
      parameters:
      - description: group_id
        in: path
        name: group_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: filter question by group_id
      tags:
      - question-manager-apis
  /question/update:
    put:
      consumes:
      - application/json
      description: 'input: question model.Question => output: status'
      parameters:
      - description: change question
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/model.Question'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update questions
      tags:
      - question-manager-apis
  /quizz/{id}:
    get:
      consumes:
      - application/json
      description: 'input: quizz''s id => output: struct quizz'
      parameters:
      - description: quizz's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get quizz by id
      tags:
      - quizz-manager-apis
  /quizz/all:
    get:
      consumes:
      - application/json
      description: 'output: struct quizzs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get quizzs
      tags:
      - quizz-manager-apis
  /quizz/create:
    post:
      consumes:
      - application/json
      description: 'input: quizz model.Quizz => output: status'
      parameters:
      - description: fill quizz
        in: body
        name: quizz
        required: true
        schema:
          $ref: '#/definitions/model.Quizz'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create quizzs
      tags:
      - quizz-manager-apis
  /quizz/delete/{id}:
    delete:
      consumes:
      - application/json
      description: 'input: quizz''s id => output: status'
      parameters:
      - description: quizz's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete quizz by id
      tags:
      - quizz-manager-apis
  /quizz/update:
    put:
      consumes:
      - application/json
      description: 'input: quizz model.Quizz => output: status'
      parameters:
      - description: change quizz
        in: body
        name: quizz
        required: true
        schema:
          $ref: '#/definitions/model.Quizz'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update quizzs
      tags:
      - quizz-manager-apis
  /user/{uid}:
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: get user by id
      tags:
      - user-manager-apis
  /user/all:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: get all users
      tags:
      - user-manager-apis
  /user/create:
    post:
      consumes:
      - application/json
      description: creates new user
      parameters:
      - description: User information
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: creates new user
      tags:
      - user-manager-apis
  /user/delete/{uid}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: delete user
      tags:
      - user-manager-apis
  /user/login:
    post:
      consumes:
      - application/json
      description: log user in
      parameters:
      - description: username & password
        in: body
        name: LoginPayload
        required: true
        schema:
          $ref: '#/definitions/model.UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: log user in
      tags:
      - user-manager-apis
  /user/login/jwt:
    post:
      consumes:
      - application/json
      description: login user, return new token string jwt
      parameters:
      - description: Insert your refresh token
        in: query
        name: refToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
      summary: login user
      tags:
      - user-manager-apis
  /user/update:
    put:
      consumes:
      - application/json
      description: Update UserPassword by userId
      parameters:
      - description: User information
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update new user password
      tags:
      - user-manager-apis
  /user/wname:
    get:
      consumes:
      - application/json
      description: input username => user
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: get user with usn
      tags:
      - user-manager-apis
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
